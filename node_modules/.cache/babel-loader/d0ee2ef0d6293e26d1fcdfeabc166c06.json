{"ast":null,"code":"var _jsxFileName = \"/Users/yunhee/Dropbox/Cod/MoodMemo/src/Lifecycle.js\",\n    _s2 = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Lifecycle = () => {\n  _s2();\n\n  var _s = $RefreshSig$();\n\n  const [count, setCount] = useState(0);\n  const [text, setText] = useState(\"\");\n  const [isVisivle, setIsVisible] = useState(false);\n\n  const toggle = () => setIsVisible(!isVisible);\n\n  const UnmountTest = () => {\n    _s();\n\n    useEffect(() => {\n      console.log(\"mount!\");\n      return () => {\n        // unmount 시점에 실행되게 됨\n        console.log(\"unmount!\");\n      };\n    }, []);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Unmount Testing Component\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 16\n    }, this);\n  };\n\n  _s(UnmountTest, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n  useEffect(() => {\n    console.log(\"mount!\");\n  }, []);\n  useEffect(() => {\n    console.log(\"update!\");\n  });\n  useEffect(() => {\n    console.log(`count is update : ${count}`);\n  }, [count]);\n  useEffect(() => {\n    console.log(`text is update : ${text}`);\n  }, [text]);\n  useEffect(() => {\n    console.log(`text is update : ${text}`);\n\n    if (count > 5) {\n      alert(\"count가 5를 넘었습니다. 따라서 1로 초기화합니다.\");\n      setCount(1);\n    }\n  }, [count]); // useEffect의 디펜던시 밸류를 잘 활용하면\n  // 특정 값이 변화하는 순간을 감지하여\n  // 콜백함수를 실행시키게 바꿀 수가 있습니다.\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      padding: 20\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: [count, /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setCount(count + 1),\n        children: \"+\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        value: text,\n        onChange: e => setText(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 12\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggle,\n        children: \"ON/OFF\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 13\n      }, this), isVisible && /*#__PURE__*/_jsxDEV(UnmountTest, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 27\n      }, this), \" // \\uB2E8\\uB77D\\uD68C\\uB85C\\uD3C9\\uAC00\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 5\n  }, this);\n};\n\n_s2(Lifecycle, \"hts4BLwKLgrSIXEu+CmKUZSi370=\");\n\n_c = Lifecycle;\nexport default Lifecycle;\n\nvar _c;\n\n$RefreshReg$(_c, \"Lifecycle\");","map":{"version":3,"names":["React","useEffect","useState","Lifecycle","count","setCount","text","setText","isVisivle","setIsVisible","toggle","isVisible","UnmountTest","console","log","alert","padding","e","target","value"],"sources":["/Users/yunhee/Dropbox/Cod/MoodMemo/src/Lifecycle.js"],"sourcesContent":["import React, {useEffect, useState} from 'react';\n\nconst Lifecycle = () => {\n    const [count, setCount] = useState(0);\n    const [text, setText] = useState(\"\");\n    const [isVisivle, setIsVisible] = useState(false);\n    const toggle = () => setIsVisible(!isVisible);\n\n    const UnmountTest = () => {\n\n        useEffect(() => {\n            console.log(\"mount!\");\n            return () => {\n                // unmount 시점에 실행되게 됨\n                console.log(\"unmount!\");\n            };\n        },[]);\n\n        return <div>Unmount Testing Component</div>\n    }\n\n    useEffect(()=> {\n        console.log(\"mount!\");\n    },[]);\n\n    useEffect(()=> {\n        console.log(\"update!\");\n    });\n\n    useEffect(()=>{\n        console.log(`count is update : ${count}`);\n    }, [count]);\n\n    useEffect(()=> {\n        console.log(`text is update : ${text}`);\n    }, [text]);\n\n    useEffect(()=> {\n        console.log(`text is update : ${text}`);\n        if(count > 5) {\n            alert(\"count가 5를 넘었습니다. 따라서 1로 초기화합니다.\");\n            setCount(1);\n        }\n    }, [count]);\n\n    // useEffect의 디펜던시 밸류를 잘 활용하면\n    // 특정 값이 변화하는 순간을 감지하여\n    // 콜백함수를 실행시키게 바꿀 수가 있습니다.\n\n    return (\n    <div style={{padding: 20}}>\n        <div>\n            {count}\n            <button onClick={() => setCount(count+1)}>+</button>\n        </div>\n        <div>\n           <input value={text} onChange={(e) => setText(e.target.value)} />\n        </div>\n        <div>\n            <button onClick={toggle}>ON/OFF</button>\n            {isVisible && <UnmountTest />} // 단락회로평가\n        </div>\n    </div>\n    );\n};\n\nexport default Lifecycle;"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;;;AAEA,MAAMC,SAAS,GAAG,MAAM;EAAA;;EAAA;;EACpB,MAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBH,QAAQ,CAAC,CAAD,CAAlC;EACA,MAAM,CAACI,IAAD,EAAOC,OAAP,IAAkBL,QAAQ,CAAC,EAAD,CAAhC;EACA,MAAM,CAACM,SAAD,EAAYC,YAAZ,IAA4BP,QAAQ,CAAC,KAAD,CAA1C;;EACA,MAAMQ,MAAM,GAAG,MAAMD,YAAY,CAAC,CAACE,SAAF,CAAjC;;EAEA,MAAMC,WAAW,GAAG,MAAM;IAAA;;IAEtBX,SAAS,CAAC,MAAM;MACZY,OAAO,CAACC,GAAR,CAAY,QAAZ;MACA,OAAO,MAAM;QACT;QACAD,OAAO,CAACC,GAAR,CAAY,UAAZ;MACH,CAHD;IAIH,CANQ,EAMP,EANO,CAAT;IAQA,oBAAO;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QAAP;EACH,CAXD;;EANoB,GAMdF,WANc;;EAmBpBX,SAAS,CAAC,MAAK;IACXY,OAAO,CAACC,GAAR,CAAY,QAAZ;EACH,CAFQ,EAEP,EAFO,CAAT;EAIAb,SAAS,CAAC,MAAK;IACXY,OAAO,CAACC,GAAR,CAAY,SAAZ;EACH,CAFQ,CAAT;EAIAb,SAAS,CAAC,MAAI;IACVY,OAAO,CAACC,GAAR,CAAa,qBAAoBV,KAAM,EAAvC;EACH,CAFQ,EAEN,CAACA,KAAD,CAFM,CAAT;EAIAH,SAAS,CAAC,MAAK;IACXY,OAAO,CAACC,GAAR,CAAa,oBAAmBR,IAAK,EAArC;EACH,CAFQ,EAEN,CAACA,IAAD,CAFM,CAAT;EAIAL,SAAS,CAAC,MAAK;IACXY,OAAO,CAACC,GAAR,CAAa,oBAAmBR,IAAK,EAArC;;IACA,IAAGF,KAAK,GAAG,CAAX,EAAc;MACVW,KAAK,CAAC,iCAAD,CAAL;MACAV,QAAQ,CAAC,CAAD,CAAR;IACH;EACJ,CANQ,EAMN,CAACD,KAAD,CANM,CAAT,CAnCoB,CA2CpB;EACA;EACA;;EAEA,oBACA;IAAK,KAAK,EAAE;MAACY,OAAO,EAAE;IAAV,CAAZ;IAAA,wBACI;MAAA,WACKZ,KADL,eAEI;QAAQ,OAAO,EAAE,MAAMC,QAAQ,CAACD,KAAK,GAAC,CAAP,CAA/B;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QAFJ;IAAA;MAAA;MAAA;MAAA;IAAA,QADJ,eAKI;MAAA,uBACG;QAAO,KAAK,EAAEE,IAAd;QAAoB,QAAQ,EAAGW,CAAD,IAAOV,OAAO,CAACU,CAAC,CAACC,MAAF,CAASC,KAAV;MAA5C;QAAA;QAAA;QAAA;MAAA;IADH;MAAA;MAAA;MAAA;IAAA,QALJ,eAQI;MAAA,wBACI;QAAQ,OAAO,EAAET,MAAjB;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA,QADJ,EAEKC,SAAS,iBAAI,QAAC,WAAD;QAAA;QAAA;QAAA;MAAA,QAFlB;IAAA;MAAA;MAAA;MAAA;IAAA,QARJ;EAAA;IAAA;IAAA;IAAA;EAAA,QADA;AAeH,CA9DD;;IAAMR,S;;KAAAA,S;AAgEN,eAAeA,SAAf"},"metadata":{},"sourceType":"module"}